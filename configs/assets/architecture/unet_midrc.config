import numpy as np
import torch
import torch.nn.functional as F

from dpipe.predict import add_extract_dims, divisible_shape
from dpipe.torch import inference_step
from dpipe.predict.shape import patches_grid
from dpipe.torch import masked_loss
from dpipe.torch.functional import weighted_cross_entropy_with_logits
from ood.torch.module.unet import UNet3DLuna


# model
architecture = UNet3DLuna(init_bias=-3)
batch_size = 3

# optimizer
batches_per_epoch = 1000
n_epochs = 30
lr_init = 1e-4
lr = Schedule(initial=lr_init, epoch2value_multiplier={6: 0.2, })

optimizer = torch.optim.Adam(architecture.parameters(), lr=lr_init)
criterion = weighted_cross_entropy_with_logits

# predict
z_patch_size = 64


@add_extract_dims(2)  # 3D -> (5D -> predict -> 5D) -> 3D
@patches_grid(z_patch_size, z_patch_size, axis=-1)  # image -> iter{patches} -> average
@divisible_shape(divisor=z_patch_size, padding_values=np.min, axis=-1)
def predict(image):
    return inference_step(image, architecture=architecture, activation=torch.sigmoid, amp=amp)


@add_extract_dims(2)  # 3D -> (5D -> predict -> 5D) -> 3D
@patches_grid(z_patch_size, z_patch_size, axis=-1)  # image -> iter{patches} -> average
@divisible_shape(divisor=z_patch_size, padding_values=np.min, axis=-1)
def predict_logit(x):
    return inference_step(x, architecture=architecture, amp=amp)
