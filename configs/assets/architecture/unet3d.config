import numpy as np
import torch

from dpipe.train.policy import Schedule
from dpipe.torch.functional import dice_loss
from dpipe.predict import add_extract_dims, divisible_shape
from dpipe.torch import inference_step
from dpipe.predict.shape import patches_grid
from ood.torch.module.unet import UNet3D
from ood.batch_iter import SPATIAL_DIMS


# loss
criterion = dice_loss

# model
n_filters = 16
architecture = UNet3D(n_chans_in=n_chans_in, n_chans_out=n_chans_out, n_filters_init=n_filters)
x_patch_size = y_patch_size = np.array([64, ] * 3)
batch_size = 10

# optimizer
batches_per_epoch = 100
n_epochs = 100
lr_init = 1e-2
lr = Schedule(initial=lr_init, epoch2value_multiplier={200: 0.1, })
weight_decay = 1e-4
optimizer = torch.optim.SGD(architecture.parameters(), lr=lr_init, momentum=0.9, nesterov=True,
                            weight_decay=weight_decay)

# predict
pred_patch_size = x_patch_size
pred_patch_stride = pred_patch_size // 2


@add_extract_dims(2)  # 3D -> (5D -> predict -> 5D) -> 3D
@patches_grid(pred_patch_size, pred_patch_stride, axis=SPATIAL_DIMS)  # image -> iter{patches} -> average
@divisible_shape(divisor=[16, ] * 3, padding_values=np.min, axis=SPATIAL_DIMS)
def predict(image):
    return inference_step(image, architecture=architecture, activation=torch.sigmoid, amp=amp)
