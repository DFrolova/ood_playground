from amid.vs_seg import VSSEG
from connectome import Chain, Apply, CacheToRam, Filter

from ood.dataset.vsseg import RenameFields
from ood.dataset.utils import Shape, Zoom, ScaleMRI
from ood.paths import VSSEG_DATA_PATH

from ood.dataset.augm_transforms import elastic_transform, blur_transform, slice_drop_transform, contrast_transform, \
    corruption_transform, pixel_shuffling_transform, ApplyAugm


def get_dataset(param, transform_fn):
    max_cache_size = 1
    dataset = Chain(
        VSSEG(root=VSSEG_DATA_PATH),
        Filter(lambda has_meningioma: not has_meningioma),
        Filter(lambda has_schwannoma: has_schwannoma),
        RenameFields(),
        ApplyAugm(param=param, transform_fn=transform_fn),
        Zoom(new_spacing=voxel_spacing),
        ScaleMRI(),
        Shape(),
        Apply(image=np.float16, mask=np.bool_),
        CacheToRam(size=max_cache_size),
        Apply(image=np.float32, mask=np.float32)
    )
    return dataset

dataset = all_datasets[0]


# from connectome import Chain, Filter, Apply, CacheToRam
#
# from ood.dataset.utils import Shape, Zoom, ScaleMRI
# from ood.dataset.vsseg_augm import VSSEG_augm
# from ood.dataset.vsseg import RenameFields
# from ood.paths import VSSEG_AUGM_DATA_PATH
#
#
# max_cache_size = 1
# dataset = Chain(
#     VSSEG_augm(root=VSSEG_AUGM_DATA_PATH),
#     RenameFields(),
#     Zoom(new_spacing=voxel_spacing),
#     ScaleMRI(),
#     Shape(),
#     Apply(image=np.float16, mask=np.bool_),
#     CacheToRam(size=max_cache_size),
#     Apply(image=np.float32, mask=np.float32)
# )
#
# load_x = dataset.image
# load_y = dataset.mask
