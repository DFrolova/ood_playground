from functools import partial

import torch

import dpipe.commands as commands
from dpipe.config import if_missing, lock_dir, run
from dpipe.layout import Flat
from dpipe.train import train, Checkpoints, Policy, TimeProfiler, TQDM
from dpipe.train.logging import TBLogger
from dpipe.torch import save_model_state, load_model_state, train_step
from ood.utils import fix_seed
from ood.metric import evaluate_individual_metrics_probably_with_ids, compute_metrics_probably_with_ids


# ### 1. PATHS ###

log_path = 'train_logs'
saved_model_path = 'model.pth'
test_predictions_path = 'test_predictions'
checkpoints_path = 'checkpoints'

# ### 2. BUILD EXPERIMENT ###

layout = Flat(split)
train_ids = layout.get_ids('train')
test_ids = layout.get_ids('test')
val_ids = layout.get_ids('val')

# ### 3. TRAIN MODEL ###

n_chans_in = 1
n_chans_out = 1
amp = True

# ### 4. RUN EXPERIMENT ###

load_x = dataset.load_image
load_y = dataset.load_segm

predict_to_dir = partial(commands.predict, ids=test_ids[:20], load_x=load_x, predict_fn=predict)

evaluate_individual_metrics = partial(
    evaluate_individual_metrics_probably_with_ids,
    load_y_true=load_y,
    metrics=final_metrics,
    predictions_path=test_predictions_path,
)

seed = 0xBadCafe
device = 'cuda'

# resource-manager execute sequence below:
# ##########################################
run_experiment = run(
    fix_seed(seed=seed),
    lock_dir(),
    architecture.to(device),
    load_model_state(architecture, saved_model_path),
    if_missing(predict_to_dir, output_path=test_predictions_path),
    if_missing(evaluate_individual_metrics, results_path='test_metrics'),
)
# ##########################################
