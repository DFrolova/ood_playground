from functools import partial
import os

import torch

import dpipe.commands as commands
from dpipe.config import if_missing, lock_dir, run
from dpipe.layout import Flat
from dpipe.train import train, Checkpoints, Policy, TimeProfiler, TQDM
from dpipe.train.logging import TBLogger
from dpipe.torch import save_model_state, load_model_state, train_step
from ood.utils import fix_seed
from ood.metric.metric import evaluate_individual_metrics_probably_with_ids, compute_metrics_probably_with_ids, evaluate_individual_metrics_with_froc
from ood.paths import ENSEMBLE_MODELS_PATH_CC359


# ### 1. PATHS ###

log_path = 'train_logs'
saved_model_path = 'model.pth'
pretrained_model_path_intermed = ENSEMBLE_MODELS_PATH_CC359
pretrained_model_path = pretrained_model_path_intermed
test_predictions_path = 'test_predictions'
logit_predictions_path = 'logit_predictions'
checkpoints_path = 'checkpoints'

# ### 2. BUILD EXPERIMENT ###

layout = Flat(split)
train_ids = layout.get_ids('train')
test_ids = layout.get_ids('test')
val_ids = layout.get_ids('val')

# ### 3. TRAIN MODEL ###

n_chans_in = 1
n_chans_out = 1

# 3.1 validation
val_metrics = {}
val_predict = predict

validate_step = None # partial(compute_metrics_probably_with_ids, predict=val_predict,
                     #   load_x=load_x, load_y=load_y, ids=val_ids, metrics=val_metrics)

# 3.2 train
logger = TBLogger(log_path=log_path)

train_kwargs = dict(lr=lr, architecture=architecture, optimizer=optimizer, criterion=criterion)

checkpoints = Checkpoints(checkpoints_path, {
    **{k: v for k, v in train_kwargs.items() if isinstance(v, Policy)},
    'model.pth': architecture, 'optimizer.pth': optimizer
})

amp = True
scaler = torch.cuda.amp.GradScaler()

train_model = train(
    train_step=partial(train_step, scaler=scaler),
    batch_iter=batch_iter,
    n_epochs=n_epochs,
    logger=logger,
    checkpoints=checkpoints,
    validate=validate_step,
    time=TimeProfiler(logger.logger),
    tqdm=TQDM(loss=False),
    **train_kwargs
)

# ### 4. RUN EXPERIMENT ###

load_x = dataset.load_image
load_y = dataset.load_segm

predict_to_dir = partial(commands.predict, ids=test_ids, load_x=load_x, predict_fn=predict)
predict_logits_to_dir = partial(commands.predict, ids=test_ids, load_x=load_x, predict_fn=predict_logit)

evaluate_individual_metrics = partial(
    evaluate_individual_metrics_with_froc,
    load_y=load_y,
    metrics=final_metrics,
    predictions_path=test_predictions_path,
    logits_path=logit_predictions_path,
)

seed = 0
device = 'cuda'

# resource-manager execute sequence below:
# ##########################################
run_experiment = run(
    fix_seed(seed=seed),
    lock_dir(),
    architecture.to(device),
    if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
    load_model_state(architecture, saved_model_path),
    if_missing(predict_logits_to_dir, output_path=logit_predictions_path),
    if_missing(predict_to_dir, output_path=test_predictions_path),
    if_missing(evaluate_individual_metrics, results_path='test_metrics'),
)
# ##########################################
