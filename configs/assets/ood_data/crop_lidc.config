import os
from functools import partial

import numpy as np

from ood.batch_iter.crop_utils import get_spatial_boxes, load_cropped_image
from ood.metric.metric import evaluate_individual_metrics_with_froc_with_crops


random_state_crops = np.random.RandomState(0xBadCafe)
spatial_boxes_path = 'spatial_boxes.json'
crop_high_eps = 50
n_repeats = 1

test_ids_crop = [f'{uid}_{i}' for i in range(n_repeats) for uid in test_ids]
load_x_crop = partial(load_cropped_image, load_x=dataset.load_image, spatial_boxes_path=spatial_boxes_path)
predict_to_dir = partial(commands.predict, ids=test_ids_crop, load_x=load_x_crop, predict_fn=predict)

# saves spatial boxes to results_path
save_spatial_boxes = partial(get_spatial_boxes, test_ids=test_ids, n_repeats=n_repeats, x_patch_size=z_patch_size,
                             pred_patch_stride=z_patch_size, load_x=load_x, random_state=random_state_crops, 
                             high_eps=crop_high_eps, results_path=spatial_boxes_path)

evaluate_individual_metrics = partial(
    evaluate_individual_metrics_with_froc_with_crops,
    load_x=load_x_crop,
    load_y_full=load_y,
    predictions_path=test_predictions_path,
    predict_logit=predict_logit,
    metrics=final_metrics,
    spatial_boxes_path=spatial_boxes_path,
)

run_experiment = run(
    fix_seed(seed=seed),
    lock_dir(),
    save_spatial_boxes(),
    architecture.to(device),
    if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
    load_model_state(architecture, saved_model_path),
    if_missing(predict_logits_to_dir, output_path=logit_predictions_path),
    if_missing(predict_to_dir, output_path=test_predictions_path),
    if_missing(evaluate_individual_metrics, results_path='test_metrics'),
)