from functools import partial

import numpy as np
import albumentations as A

from dpipe.batch_iter import Infinite, load_by_random_id, unpack_args, multiply
from dpipe.im.shape_utils import prepend_dims
from ood.batch_iter.augmentations import apply_augm_pipeline
from ood.batch_iter.pipeline import get_random_slice, get_random_patch_2d


ids_sampling_weights = None
slice_sampling_interval = 1

p_augm = 0
random_state = np.random.RandomState(seed=seed)

augm_pipeline = A.Compose([
    A.RandomSizedCrop(min_max_height=(int(x_patch_size[0] * 0.8), x_patch_size[0]),
                      height=x_patch_size[0], width=x_patch_size[1], p=0.8),
    A.Rotate(limit=5, p=0.5)
])

batch_iter = Infinite(
    load_by_random_id(dataset.load_image, dataset.load_segm, ids=train_ids,
                      weights=ids_sampling_weights, random_state=random_state),
    multiply(np.float32),
    unpack_args(get_random_slice, interval=slice_sampling_interval, random_state=random_state),
    unpack_args(get_random_patch_2d, x_patch_size=x_patch_size, y_patch_size=y_patch_size, random_state=random_state),
    partial(apply_augm_pipeline, pipeline=augm_pipeline, p=p_augm, random_state=random_state),
    multiply(prepend_dims),

    batch_size=batch_size, batches_per_epoch=batches_per_epoch
)
