from ood.utils import skip_predict, skip_calculating_metrics
from ood.torch.module.unet import UNet3DWithActivations


pred_patch_stride = pred_patch_size

@add_extract_dims(n_add=2, n_extract=0)  # 3D -> (5D -> predict -> 5D) -> 4D
@patches_grid(pred_patch_size, pred_patch_stride, axis=SPATIAL_DIMS)  # image -> iter{patches} -> size
@divisible_shape(divisor=[16, ] * 3, padding_values=np.min, axis=SPATIAL_DIMS)
def predict_features(x):
    return inference_step(x, architecture=architecture, amp=amp)

architecture = UNet3DWithActivations(n_chans_in=n_chans_in, n_chans_out=n_chans_out, n_filters_init=n_filters)
saved_model_path = os.path.join(ENSEMBLE_MODELS_PATH_CC359, f'seed{seed}/experiment_0/model.pth')

predict_features_no_extra_dim = lambda x: predict_features(x)[0]
predict_to_dir = partial(commands.predict, ids=test_ids, load_x=load_x, predict_fn=predict_features_no_extra_dim)
predict_logits_to_dir = skip_predict
evaluate_individual_metrics = skip_calculating_metrics