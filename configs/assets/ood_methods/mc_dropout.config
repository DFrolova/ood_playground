import time

from dpipe.io import save_json
from ood.torch.module.unet import UNet3D_MC_Dropout
from ood.torch.model import inference_step_mc_dropout
from ood.metric.metric import evaluate_individual_metrics_probably_with_ids_no_pred_mc_dropout
from ood.metric.ood_metric import get_inconsistency_metrics


p_dropout = 0.1
architecture = UNet3D_MC_Dropout(n_chans_in=n_chans_in, n_chans_out=n_chans_out, 
                                 n_filters_init=n_filters, p_dropout=p_dropout)

N = 10
final_metrics = {}

evaluate_individual_metrics = partial(
    evaluate_individual_metrics_probably_with_ids_no_pred_mc_dropout,
    load_y=load_y,
    load_x=load_x,
    predict=predict,
    predict_logit=predict_logit,
    predict_with_dropout=partial(predictions_mc_dropout, N=N),
    test_ids=test_ids,
    agg_function=partial(get_inconsistency_metrics, top_n_voxels=top_n_voxels),
    segm_functions=final_metrics,
)

@add_extract_dims(2)  # 3D -> (5D -> predict -> 5D) -> 3D
# to avoid averaging across patches we take pred_patch_stride = pred_patch_size
@patches_grid(pred_patch_size, pred_patch_size, axis=SPATIAL_DIMS)  # image -> iter{patches} -> average
@divisible_shape(divisor=[16, ] * 3, padding_values=np.min, axis=SPATIAL_DIMS)
def predict_with_dropout(image):
    return inference_step_mc_dropout(image, architecture=architecture, activation=torch.sigmoid, amp=amp)


def predictions_mc_dropout(image, N=10):
    return np.array([predict_with_dropout(image) for i in range(N)])


run_experiment = run(
    fix_seed(seed=seed),
    lock_dir(),
    architecture.to(device),
    if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
    load_model_state(architecture, saved_model_path),
    fix_seed(seed=seed), # in order to reproduce predictions
    if_missing(predict_logits_to_dir, output_path=logit_predictions_path),
    save_json(time.time(), 'time.json'),
    if_missing(predict_to_dir, output_path=test_predictions_path),
    save_json([(time.time() - load('time.json')) / len(test_ids), time.time()], 'time.json'),
    if_missing(evaluate_individual_metrics, results_path='test_metrics'),
    save_json([load('time.json')[0], (time.time() - load('time.json')[1]) / len(test_ids)], 'time.json'),
)