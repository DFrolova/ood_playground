from functools import partial
import os
import time

from dpipe.layout import Flat
from dpipe.config import if_missing, lock_dir, run
from dpipe.io import load, save_json
from ood.ood_methods.image_statistics import get_all_scores_from_image_augm
from ood.utils import skip_predict, fix_seed


predict_to_dir = skip_predict

layout = Flat(split)
train_ids = layout.get_ids('train')
test_ids = layout.get_ids('test')

evaluate_individual_metrics = partial(
    get_all_scores_from_image_augm,
    load_x_fns=load_x_fns,
    full_uid_fns=full_uid_fns,
    test_ids=test_ids,
    train_predictions_path=train_predictions_path,
)

train_predictions_path = os.path.join(pretrained_model_path, 'image_statistics/experiment_0')
seed = 0

run_experiment = run(
    fix_seed(seed=seed),
    lock_dir(),
    save_json(time.time(), 'time.json'),
    if_missing(evaluate_individual_metrics, results_path='test_metrics'),
    save_json((time.time() - load('time.json')) / len(test_ids), 'time.json'),
)






# from functools import partial
# import os
# import time
# import numpy as np
#
# from dpipe.layout import Flat
# from dpipe.config import if_missing, lock_dir, run
# from dpipe.io import load, save_json
# from ood.ood_methods.image_statistics import get_all_scores_from_image_augm
# from ood.utils import skip_predict
# from ood.dataset.augm_transforms import elastic_transform, blur_transform, slice_drop_transform, contrast_transform, \
#     corruption_transform, pixel_shuffling_transform
#
#
# predict_to_dir = skip_predict
#
# layout = Flat(split)
# train_ids = layout.get_ids('train')
# test_ids = layout.get_ids('test')
#
# transform_fns = [elastic_transform, blur_transform, slice_drop_transform, contrast_transform,
#                  corruption_transform, pixel_shuffling_transform]
# param_dict = {
#     elastic_transform: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7],
#     blur_transform: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, .99],
#     slice_drop_transform: np.arange(0.05, 0.40001, 0.05),
#     contrast_transform: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7],
#     corruption_transform: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7],
#     pixel_shuffling_transform: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, .99],
# }
#
# evaluate_individual_metrics = partial(
#     get_all_scores_from_image_augm,
#     load_x=dataset.image,
#     test_ids=test_ids,
#     train_predictions_path=train_predictions_path,
#     transform_fns=transform_fns,
#     param_dict=param_dict,
# )
#
# train_predictions_path = os.path.join(pretrained_model_path, 'image_statistics/experiment_0')
#
# run_experiment = run(
#     lock_dir(),
#     save_json(time.time(), 'time.json'),
#     if_missing(evaluate_individual_metrics, results_path='test_metrics'),
#     save_json((time.time() - load('time.json')) / len(test_ids), 'time.json'),
# )
