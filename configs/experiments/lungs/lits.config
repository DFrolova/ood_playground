from ...assets.utils.no_pred import *
from ...assets.dataset.lits_original import *
from ...assets.cross_val.cv_new_dataset import *
from ...assets.metric.metrics_3d import *

from dpipe.layout import Flat
from dpipe.config import lock_dir, run
from lungs_segm.pipeline.selector import select_model
from ood.metric.ood_metric import get_abs_ue_score, get_entropy
from ood.metric.metric import evaluate_individual_metrics_with_froc_no_pred_lits
from ood.utils import get_pred, sdice


n_experiments = 1
layout = Flat(split)
train_ids = layout.get_ids('train')
test_ids = layout.get_ids('test')[:2]
val_ids = layout.get_ids('val')

model = select_model(pixel_spacing=None, slice_locations=np.arange(20))

sdice_metric = lambda x, y, i: sdice(get_pred(x), get_pred(y), load_spacing(i), sdice_tolerance)
final_metrics = {'dice_score': dice_metric, 'sdice_score': sdice_metric, 'entropy': get_entropy, 
                 'abs_ue_score': get_abs_ue_score}

predictions_path = 'test_predictions'
evaluate_individual_metrics = partial(
    evaluate_individual_metrics_with_froc_no_pred_lits,
    load_y=load_y,
    load_x=load_x,
    load_spacing=load_spacing,
    load_slice_location=None,
    predict=model.predict,
    predict_logit=None,
    metrics=final_metrics,
    test_ids=test_ids,
    predictions_path=predictions_path,
)

# resource-manager execute sequence below:
# ##########################################
run_experiment = run(
    lock_dir(),
    evaluate_individual_metrics(results_path='test_metrics'),
)
# ##########################################