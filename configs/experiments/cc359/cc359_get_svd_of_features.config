from ...assets.core import *
from ...assets.dataset.cc359 import *
from ...assets.batch_iter.patch_sampling_3d import *
from ...assets.architecture.unet3d import *
from ...assets.cross_val.cv_cc359 import *
from ...assets.metric.metrics_3d import *

from ood.utils import skip_predict, skip_calculating_metrics
from ood.torch.module.unet import UNet3DWithActivations
from ood.ood_methods.svd import get_spectrum, get_ood_scores_from_spectrum


train_predictions_path = '.'#'/shared/experiments/ood_playground/cc359/svd/experiment_0'
svd_predictions_path = 'svd_spectrum'
metrics_path = 'test_metrics'

architecture = UNet3DWithActivations(n_chans_in=n_chans_in, n_chans_out=n_chans_out, n_filters_init=n_filters)
seed = 0
saved_model_path = f'/shared/experiments/ood_playground/cc359/ensemble2/seed{seed}/experiment_0/model.pth'

test_ids = dataset.ids

predict_features_svd = lambda x: get_spectrum(predict_features(x)[0])
predict_to_dir = partial(commands.predict, ids=test_ids, load_x=load_x, predict_fn=predict_features_svd)
predict_logits_to_dir = skip_predict

run_experiment = run(
    fix_seed(seed=seed),
    lock_dir(),
    architecture.to(device),
    if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
    load_model_state(architecture, saved_model_path),
    if_missing(predict_logits_to_dir, output_path=logit_predictions_path),
    if_missing(predict_to_dir, output_path=svd_predictions_path),
    get_ood_scores_from_spectrum(test_ids=test_ids, train_predictions_path=train_predictions_path, 
                                 spectrum_folder=svd_predictions_path, results_path=metrics_path),
)