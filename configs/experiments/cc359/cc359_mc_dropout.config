from ...assets.core import *
from ...assets.utils.no_pred import *
from ...assets.dataset.cc359 import *
from ...assets.batch_iter.patch_sampling_3d import *
from ...assets.architecture.unet3d import *
from ...assets.cross_val.cv_cc359 import *
from ...assets.metric.metrics_3d import *

from dpipe.torch.functional import weighted_cross_entropy_with_logits
from ood.torch.module.unet_mc_dropout import UNet3D_MC_Dropout
from ood.metric.ood_metric import evaluate_individual_metrics_probably_with_ids_no_pred_mc_dropout, get_top_n_labels_std


n_experiments = 1
n_epochs = 50
batches_per_epoch = 20
batch_size = 2

criterion = weighted_cross_entropy_with_logits

lr_opt = 1e-3

p_dropout = 0.5
architecture = UNet3D_MC_Dropout(n_chans_in=n_chans_in, n_chans_out=n_chans_out, 
                                 n_filters_init=n_filters, p_dropout=p_dropout)

validate_step = None

final_metrics = final_metrics_ood
top_n_voxels = 500000
agg_functions = {'get_top_n_labels_std': partial(get_top_n_labels_std, n=top_n_voxels)}

evaluate_individual_metrics = partial(
    evaluate_individual_metrics_probably_with_ids_no_pred_mc_dropout,
    load_y=load_y,
    load_x=load_x,
    predict=predictions_mc_dropout,
    test_ids=test_ids,
    agg_functions=agg_functions,
)

run_experiment = run(
    fix_seed(seed=seed),
    lock_dir(),
    architecture.to(device),
    if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
    load_model_state(architecture, saved_model_path),
    if_missing(predict_to_dir, output_path=test_predictions_path),
    if_missing(evaluate_individual_metrics, results_path='test_metrics'),
)